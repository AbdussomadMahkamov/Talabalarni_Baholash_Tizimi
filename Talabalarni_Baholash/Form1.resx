<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHlzJAD/3fAAr55wDbmjhDu5nYV1tJF+pq+G
        dsWsgHHTrIBy066GdcW0kX6luZ2FdbmkhDuvnnAN+NfiAHZxIgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAINuMQD+5fAAsp53F7mdhWavhXa7nGFZ7Ik9
        Of1/Kin/jD8//45DQ/+IOTn/hzc2/38rKv+IPDn9nGBY7K+Fdru5nYVlsp53Fvfe5gCCbjAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACtlm0ApJBgB7ieg1esgHLKj0hE/HET
        E/93HB3/cBQU/2UCAv+HODj/j0VF/4Y3N/+PRkb/aw0O/28SEv91Ghr/cRMT/49JRPytgXPJuJ6DVqSP
        XweslWwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA1FgEAuqODALCacxa1lICSm11W9Yk6
        Ov+HNzj/ZQEB/2wKC/96IiH/i0A9/5xeWP+iaWP/omlj/5tdWP+LPzz/fCUk/24NDf9lAgL/fyoq/34o
        J/+aXVb0tpWBka+ZcxW5ooIALhIAAAAAAAAAAAAAAAAAAAAAAAAAAAAANxUBALqjhACym3cdsox7r5BJ
        Rf6OQ0P/mVVV/4k6Ov+MQT7/tImA/9K+sv/j2M7/7Obd//Hu5//x7uf/7OXd/+PYzv/SvbL/tIh//4xC
        P/+CLy//jkND/4IuLv+ORUH+so17rrKbdxy6ooMANBEAAAAAAAAAAAAAAAAAAAAAAACwlnQArphxFrKM
        e6+NQ0H/iTs7/5hTU/+KPTz/s4h//9vLwP/Kq6X/x6Oi//Dm5v/69vf/07a2/9a6u//7+Pj/7eDh/8Wf
        nv/Osaz/3M3C/7SIgP+KPT3/jD8//38qK/+LPz3/so18rq6XcBWwlnMAAAAAAAAAAAAAAAAAn39XAJuE
        TQe1lICSjkZC/o1AQP+NQUL/kElG/8qwpP/SurP/tIKB/6BhYf+EMTH/r3p6/+7j4/+tdnb/sX19/+7j
        4/+laWn/hzY2/6JjZP+2hob/18K6/8qvpP+QSEX/ijw8/4xAQP+QSUb+tpWBkJiBSQaeflUAAAAAAIZc
        LgDTvrQAuJ6DWJteV/R2Gxv/gS0t/5BIRf/Ntan/0ri0/6dsbP+TSkr/k0pK/5tZWf/Zv7////////z6
        +v/8+/v//////9CwsP+cW1v/j0VF/5VOTv+qcXL/17+7/862qv+PR0T/hjU2/38rK/+YWlP0uJ+EVtG7
        sACFWy0AqIpmALGcdBesgHLJgi8v/4c4OP+ALy7/yrCk/9vFwf+cWVr/iTs7/6BhYf+qcXH/wJeX/9S2
        tv/Ut7f/1bm5/9W5uf/Ut7f/07W1/76Skv+kZ2f/n19f/4k7O/+gYGD/4M/L/8qvpP+CMC//eyMj/4Qz
        Mv+tgXPIsJtzF6eJZQDQuK8AuJyEZpFLR/2EMjP/gzAw/7SIf//ZxL3/mlZW/49FRf+gYmH/toWF/5BG
        Rv+VT07/o2Vl/6FjY/+UTEz/lU1N/6JlZP+jZWX/k0tL/49ERP+ve3r/oGFh/41BQf+fX1//3s3G/7OG
        fv+IODj/hjY2/5FMR/y4nYRlz7esAKybaQ6tg3S7gjAv/4g5Of+RSkf/2sq//76Tkv+ZVVX/mFRU/9K0
        s/+2iIX/sYB8/7eLh/+/lpX/vpSS/55hXf+gZGD/wJmW/8CXlv+2iIT/soJ+/7eJhv/Jp6b/mFRU/5hT
        U//GoaD/28vA/5FKR/+MPj//gS4u/66EdbmrmmgNuaKDPJxiWuyHNzf/hDMz/7OIf//ZxL7/mlZW/41C
        Qv+1hIP/za+s/7+YlP/Go5//za+r/8Senf+3iof/gS8t/4QzMf+7kI7/xqKg/8usqP/IpqL/wZqW/8il
        ov+ueXn/jUND/51bW//fzsj/s4d+/4g4Of+JOjr/nmRc67iigjq4m4N1j0dE/YIvL/+ENDP/0Lqu/8Se
        nf+JOjr/pWho/8+xr//Cnpr/wJmV/8ajn//Nrqr/xZ+d/7OCgf9+Lyf/gDEq/7iKiP/HoqH/y6yo/8em
        ov/Bmpb/wZuX/82urP+gYWH/ijw8/82sq//Qua7/iTw8/5BGRv+QSkb9uJuDc7KPe6aMQUD/mVRU/5JN
        Sv/dzsP/rnh4/5tZWf+ueHj/4M7L/8KcmP/AmZX/xqSg/82vq//En53/s4OB/45PP/+OT0H/uIqJ/8ai
        of/LrKj/yKai/8Gbl//Ampb/3svI/6VpaP+cWlr/tYSE/9/Rx/+TTkv/kklJ/4o+Pf+zkHykroV1xYc4
        OP+RR0j/n2Nd/9/QyP+cWVr/ijw8/7mLi/+3iYb/qHFt/6Zuav+qdXH/tISA/7uOjf+xfnz/kEhG/5JL
        SP+zgoH/vJCO/7KBff+rdnP/p29r/6dva/+1h4P/rnl4/4g5Of+iZGX/49fP/5xfWf95ICD/eiIi/6+H
        d8Orf3DSiDg4/5FISP+lbmj/3MrD/6NlZv+dW1v/sX19/4MwMP9+KSn/fikp/34oKP+KPDz/kEZG/4w/
        P/+NQkH/jUJB/4s/Pv+RR0f/iTs7/34oKP9+KSn/fikp/4MwMP+pcXH/nFlZ/6dsbP/h08z/o2tl/4Et
        Lv+DMTH/rIFy0ayAcdJ6ISH/eiEi/6RtZv/dzMX/lU5P/5JKSv/Fn5//xZ6e/8KZmf/CmZn/wpmZ/8Sc
        nP+nbGz/nVtb/5xaWv+cWlr/nVtb/6lvb//Fnp7/wpmZ/8KZmf/CmZn/xZ6e/72Rkf+RSEj/mlZW/+PW
        z/+ja2X/gzAx/4c3N/+sgXLRroV1xYMwMP+CLy//nF9a/9zLw/+na2z/j0VF/9S4uP//////////////
        /////////v7+//fx8f/07e3/9Ozs//Ts7P/07e3/9/Ly//7+/v//////////////////////zKqq/45C
        Qv+sdXX/4NLK/51gW/+IOTn/hjU1/66GdcOyj3ymij08/5RNTv+RS0j/3tDG/6JkZP+YVFT/vJCQ//79
        /f/l1NT/49HR//Ts7P/ZwcH/5dPT/+TT0//fysr/5NLS/+LPz//17+//8ejo/+LPz//gzMz/+/j4//38
        /P+1g4P/l1JS/6pxcf/g1Mr/kElG/4o8PP+LPz7/s498o7eagnWPSEX9kUdH/4c4OP/Otqv/x6Oh/4s+
        Pv+hYmL/6NnZ/8Wfn//Kp6f/1ru7/8ScnP/Wu7v/vJCQ/7SEhP+8kpL/0rW1/+nb2//38vL/wpub/7iM
        jP/p2tr/6tvb/5tYWP+NQkL/zq+t/863rP+IOjr/jUFB/5FLR/23moJzuKGBPJxhWeySSUr/jkJD/7OI
        f//Wv7n/l1JT/55eXv/Lqan/4s7O/9nAwP/dx8f/2cDA/9O1tf/TtbX/38rK/9Gysv/hzs7/6t3d//z6
        +v/XvLz/0LGx/+TS0v/EnJz/n15e/5hUVP/dy8X/s4d+/4o7PP+MPz//nGJa67ihgTqqmWcNrIFyu4g6
        Of+VTk7/k0xK/9fFuv+/lZX/iTw8/6JlZf/n2Nj//////////////v7///7+///////8/Pr//Pv6////
        /////v7////////+/v//////4MvL/59fX/+JOzv/x6Oj/9jHvP+SS0j/m1hY/4c3N/+tgnK5qplmDc61
        qwC3moFmk09K/ZFHR/+GNTX/s4d//9jDvP+kZ2f/ij09/5tYWP/p2tr////////////8+/r/7OXe/9O8
        tP/Vv7f/7ebg//38+////////////+PQ0P+VT0//jUFB/6Zra//ezcb/soZ9/4U0NP+LPj7/lFBL/Lea
        gWTMs6gAp4hkAK+ZcRerf3DJfysq/5NMTP+KPTz/yKyg/9vHw/+RR0f/kklJ/8+urv////////////f0
        8P+5kIn/hjU1/4g4OP+/mpL/+ff0////////////xp+f/5FHR/+UTU7/4dDM/8isof+EMjH/iz09/4U0
        M/+rf3DIr5lwFqaHYwCIXi8A0LqvALecgVeZWlP0gzAx/41BQv+QSEb/z7mt/86xrf/Mqar/vpOT//z6
        +v//////5drS/6RqZ/+7jo7/uoyM/6hybv/p4Nj///////n19f+6jY3/zqyt/9G2sv/Quq7/jkVC/41B
        Qf+JOjr/m11W9LacgFbOuKsAh10vAAAAAACefVUAmYJKBrSTfpKORUH+hTQ0/3oiIv+ORUL/ya6j//Ht
        5v/9/Pz///7////////18u3/tYeB/4U0NP+HNzf/upGL//f18f////////7+//39/P/w7OX/ya2i/49G
        Q/+CLy//kUhI/5BIRP60k36Ql4BHBp19VAAAAAAAAAAAAAAAAACvlHIArZZvFbKMeq+GODX/gjEx/4g6
        Ov+ENDP/soV8/9zNwv/z8Ov//f38//z6+f/n3NX/yaqj/8uup//o39f//Pz7//39/P/z8Or/283B/7GE
        fP+CLy7/dRoa/4QyM/+LQD7/sYx6ra2WbhWulHEAAAAAAAAAAAAAAAAAAAAAADoXAQC5oYIAsJl0HLGL
        eq+QSEX+gi4u/5FHSP+KPDz/kkxJ/7GFfP/Pt6z/4dbM/+zm3v/q5Nr/6+Xb/+zm3v/h1sz/z7es/7KF
        fP+SS0n/gy8w/45CQv93HB3/jEM//rGMeq6wmXQcuKCBADEQAAAAAAAAAAAAAAAAAAAAAAAAAAAAADEV
        AQC4oYAArphxFbSSfZKbXlb0iDg4/5hTU/+SSEn/jEBA/4k7O/+STUn/nF5Z/6NrZf+jamT/mltW/5BJ
        Rv+LPj3/ijw8/4c3N/+BLS3/hTMz/5xfWPS0k36QrphwFbigfwAsEAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAACrlGoAo45dB7acgFarfnDKk09K/IQzMv+MPj//jUFB/5JJSf+HODj/ijw8/41B
        Qf+BLi7/gzIy/5tXV/+MQED/gCsr/5FMR/yrfnDJt5yAVaOOXAerk2kAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACBbC8A+N/mALGcdRa3moFlrYJzu5xhWOyQSUX9iTs5/4g5
        Of+GNjb/ijs7/4QzM/+DMjD/kElG/Z1iWuytg3S6t5uBZLGcdRbx2NsAgGsuAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdnAjAPTS2QCunW4NuKKCOreb
        gnSzj3ylroV1xKyAcdKrf3HSroZ1xLOQfaW3m4J0uKKBOq2dbg3x0NMAc20hAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/8AD//8AAP/8AAA/+AAAH/AAAA/gAAAHwAAAA8AAAAOAAAABgAAAAQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAGAAAABwAAAA8AA
        AAPgAAAH8AAAD/gAAB/8AAA//wAA///AA/8=
</value>
  </data>
</root>